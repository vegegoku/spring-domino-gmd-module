buildscript {
  apply from: "$rootDir/gradle/versions.gradle"
}

plugins {
  id "java"
  id "idea"
//  id "org.springframework.boot" version "1.5.10.RELEASE"
  id "net.ltgt.apt" version "0.14"
}

repositories {
  mavenCentral()
  mavenLocal()
  jcenter()
}

group 'com.test.portal'
version '1.0-SNAPSHOT'

apply from: "gradle/gwt.gradle"
apply from: "gradle/codeQuality.gradle"

dependencies {
  // logger
  compile("org.apache.logging.log4j:log4j-core:$log4jVersion")
  compile("org.apache.logging.log4j:log4j-api:$log4jVersion")

  // gwt-material
  compileOnly("com.github.gwtmaterialdesign:gwt-material:$gwtMaterialVersion")
  compileOnly("com.github.gwtmaterialdesign:gwt-material-addins:$gwtMaterialAddinsVersion")
  compileOnly("com.github.gwtmaterialdesign:gwt-material-themes:$gwtMaterialThemesVersion")
  compileOnly("com.github.gwtmaterialdesign:gwt-material-table:$gwtMaterialTableVersion")

  // domino
  compileOnly("com.progressoft.brix.domino.api:domino-api-shared:$dominoVersion")
  compileOnly("com.progressoft.brix.domino.api:domino-api-client:$dominoVersion")
  compileOnly("com.progressoft.brix.domino.impl:domino-gwt:$dominoVersion")
  compileOnly("com.progressoft.brix.domino.logging:domino-gwt-logger:$dominoVersion")
  compileOnly("com.progressoft.brix.domino:domino-client-commons:$dominoVersion")

  compileOnly("com.google.elemental2:elemental2-core:$elemental2Version")
  compileOnly("com.google.elemental2:elemental2-dom:$elemental2Version")
  compileOnly("org.fusesource.restygwt:restygwt:$restyGwtVersion")

  annotationProcessor("com.progressoft.brix.domino.apt:apt-client:$dominoVersion")
  annotationProcessor("com.google.auto.service:auto-service:$autoServiceVersion")
  annotationProcessor("com.progressoft.brix.domino.api:domino-api-shared:$dominoVersion")
  annotationProcessor("com.progressoft.brix.domino.api:domino-api-client:$dominoVersion")
  annotationProcessor("com.progressoft.brix.domino.impl:domino-gwt:$dominoVersion")

  compileOnly("com.google.auto.service:auto-service:$autoServiceVersion")

  // GWT framework
  compileOnly("com.google.gwt:gwt-user:$gwtVersion")
  compileOnly("com.google.gwt:gwt-dev:$gwtVersion")

  // spring
  compileOnly("org.springframework.boot:spring-boot-configuration-processor")
  compile("org.springframework.boot:spring-boot-starter-jetty")
  compile("org.springframework.boot:spring-boot-starter-web") {
    exclude module: "spring-boot-starter-tomcat"
  }
  compile("javax.ws.rs:javax.ws.rs-api:$wsrsapiVersion")

  compileOnly("org.projectlombok:lombok:$lombokVersion")
  annotationProcessor("org.projectlombok:lombok:$lombokVersion")

  // common testing
  testCompile("junit:junit:$junitVersion")
  testCompile("org.springframework.boot:spring-boot-starter-test")
}

sourceSets {
  generated {
    java.srcDir "src/generated/"
  }
  main.java.srcDirs = ['src/main/java', "src/generated/java"]
  main.resources.srcDir "src/main/resources"
  test.java.srcDir "src/test/java"
  test.resources.srcDir "src/test/resources"
}

clean.doFirst {
  delete "${rootDir}/build"
  delete "${rootDir}/war"
  delete "${rootDir}/out"
}

compileGwt {
  classpath {
    [
        sourceSets.main.java.srcDirs,           // Java source
        sourceSets.main.output.resourcesDir,    // Generated resources
        sourceSets.main.output.classesDir,      // Generated classes
        sourceSets.main.compileClasspath,       // Deps
    ]
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = "4.5.1"
}

task fastRun {
  gradle.startParameter.excludedTaskNames += "checkstyleMain"
  gradle.startParameter.excludedTaskNames += "checkstyleTest"
  gradle.startParameter.excludedTaskNames += "checkstyleGenerated"
  gradle.startParameter.excludedTaskNames += "findbugsMain"
  gradle.startParameter.excludedTaskNames += "findbugsTest"
  gradle.startParameter.excludedTaskNames += "test"
}

// deletes generated classes before new compilation
task deleteGenerated(type: Delete) {
  delete project.fileTree('src/generated/')
}

compileGeneratedJava {
  dependsOn('deleteGenerated')
}

compileJava {
  sourceCompatibility = "1.8"
  targetCompatibility = "1.8"
  options.encoding = 'UTF-8'
  options.compilerArgs = ['-Xlint:unchecked'] // Just a smoke test that using this option does not lead to any
  options.annotationProcessorGeneratedSourcesDirectory = new File("${projectDir.absolutePath}/src/generated/java")
  dependsOn(processResources, compileGeneratedJava)
  source += sourceSets.generated.java
  source += sourceSets.generated.output
}

test {
  systemProperties = System.properties
}

jar.dependsOn compileGwt

jar {
  into("static") {
    from compileGwt.buildDir
  }
}